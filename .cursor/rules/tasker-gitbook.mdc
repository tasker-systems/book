---
description:
globs:
alwaysApply: false
---
# Tasker GitBook Project Intelligence

## Project Type & Context
This is a GitBook documentation project that presents the Tasker Rails workflow orchestration engine through compelling engineering stories. The project transforms technical documentation into narrative-driven content.

## Critical Project Patterns

### Repository Exclusion Strategy
**CRITICAL**: Development files must NEVER be published to GitBook:
- `.cursor/` - Development environment configuration
- `memory-bank/` - Internal project documentation
- `.ruby-lsp/` - Ruby language server cache

**Implementation**: Multiple redundant exclusion methods:
1. `.bookignore` file with explicit exclusions
2. `book.json` ignore array configuration
3. SUMMARY.md controls navigation (only include intended files)
4. GitBook.com dashboard settings (when available)

### Content Development Workflow
**Pattern**: Each chapter follows strict structure:
```
post-XX-topic-name/
├── README.md           # Chapter overview
├── blog-post.md        # Main narrative
├── preview.md          # Teaser for unreleased
├── code-examples/      # Working implementations
├── setup-scripts/      # One-command installation
└── TESTING.md         # Troubleshooting guide
```

**Quality Standards**:
- All code examples must run immediately with single command
- Every setup script must work on macOS, Linux, Windows (WSL)
- Comprehensive error handling and troubleshooting documentation
- Production-quality code with proper monitoring integration

### Narrative Continuity Requirements
**Characters**: Sarah's team evolves across all chapters
**Company**: GrowthCorp (e-commerce) with growing complexity
**Technical Progression**: Each chapter builds on previous patterns
**Code Evolution**: Examples reference and extend previous implementations

### GitBook Configuration Preferences
**Essential Plugins**: github, edit-link, copy-code-button, prism, anchorjs
**Styling**: Dark code themes, responsive design, accessibility compliance
**Variables**: Centralized version management (Tasker 2.5.0)
**Analytics**: Google Analytics integration for engagement tracking

## Development Preferences

### Memory Bank Maintenance
**Always** maintain comprehensive memory bank with 6 core files:
- projectbrief.md (foundation)
- productContext.md (user experience goals)
- systemPatterns.md (architecture patterns)
- techContext.md (technology stack)
- activeContext.md (current work focus)
- progress.md (status and roadmap)

### Chapter Development Priority
1. **Chapter 2**: Data Pipeline Resilience (immediate priority)
2. **Chapters 3-6**: Sequential development with community feedback
3. **Code Quality**: All examples must work before narrative completion
4. **Testing**: Comprehensive failure scenario validation

### Community Integration
**Edit Links**: Enable GitHub editing from GitBook pages
**Contribution Workflow**: Clear guidelines in appendices/contributing.md
**Issue Tracking**: Centralized problem reporting via GitHub
**Discussion**: Community questions and pattern sharing

## Technical Constraints

### Tasker Integration Requirements
- **Version**: 2.5.0 (consistent across all examples)
- **Dependencies**: Ruby 3.0+, Rails 7.0+, PostgreSQL, Redis
- **Background Jobs**: Sidekiq for async processing
- **Monitoring**: Built-in observability and health checks

### GitBook Platform Limitations
- **Build Performance**: Large repos have slow build times
- **File Size**: Individual files should be under 1MB
- **Navigation Depth**: Limited nesting in SUMMARY.md
- **Plugin Compatibility**: Must use compatible versions

### Quality Assurance Standards
- **Local Testing**: Always validate `gitbook serve` before committing
- **Code Validation**: All Tasker examples must execute successfully
- **Cross-Platform**: Scripts tested on multiple operating systems
- **Link Checking**: All internal and external links verified

## Success Patterns

### Reader Engagement Indicators
- High time-on-page for narrative content
- Frequent execution of setup scripts
- Active community discussions and questions
- Return visits for pattern reference

### Content Quality Markers
- Immediate code execution without setup friction
- Clear narrative progression between chapters
- Comprehensive troubleshooting documentation
- Production-ready patterns with proper error handling

### Community Health Signals
- Thoughtful questions about implementation details
- Community sharing their own adaptations
- Contributions to examples and documentation
- Enterprise inquiries about commercial support

## Risk Mitigation

### Development File Exposure
**Risk**: Accidentally publishing .cursor/ or memory-bank/
**Mitigation**: Multiple exclusion strategies, local build testing

### Code Example Maintenance
**Risk**: Examples breaking with dependency updates
**Mitigation**: Regular validation, version pinning, automated testing

### Narrative Consistency
**Risk**: Character/story inconsistencies across chapters
**Mitigation**: Character development documentation, story arc planning

### GitBook Platform Dependency
**Risk**: Platform changes breaking build process
**Mitigation**: Local build capability, content export strategy

This project intelligence helps maintain consistency and quality across development sessions while ensuring the public documentation remains clean and professional.
